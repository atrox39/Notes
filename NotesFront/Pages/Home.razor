@page "/"

@using Notes.Front.Service
@using Notes.Front.Provider

@inject IAuthService authService
@inject NavigationManager navManager
@inject UserProvider userProvider

<PageTitle>Login</PageTitle>

<div class="container mt-4">
  <div class="row justify-content-center">
    <EditForm Model=@loginDto OnValidSubmit="OnSubmit" class="col-md-6">
      <DataAnnotationsValidator />
      <h3>Login</h3>
      <div class="form-group">
        <label for="email">Email</label>
        <InputText type="email" @bind-Value=loginDto.Email class="form-control" id="email" />
        <ValidationMessage For="() => loginDto.Email" />
      </div>
      <div class="form-group">
        <label for="email">Password</label>
        <InputText type="password" @bind-Value=loginDto.Password class="form-control" id="password" />
        <ValidationMessage For="() => loginDto.Password" />
      </div>
      <input type="submit" class="btn btn-primary mt-2 w-100" value="Login" />
    </EditForm>
  </div>
</div>

@code {
  private LoginDto loginDto = new LoginDto();

  private async void OnSubmit()
  {
    TokenDto? tokenDto = await authService.Login(loginDto);
    if (tokenDto is not null)
    {
      navManager.NavigateTo("/notes");
    }
  }

  protected override async Task OnInitializedAsync()
  {
    var authState = await userProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    if (user.Identity?.IsAuthenticated ?? false)
    {
      navManager.NavigateTo("/notes");
    }
  }
}
